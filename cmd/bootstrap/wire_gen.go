// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package bootstrap

import (
	"context"
	"contrib.go.opencensus.io/exporter/jaeger"
	"contrib.go.opencensus.io/exporter/prometheus"
	"github.com/alvarocabanas/cart/internal/creator"
	"github.com/alvarocabanas/cart/internal/getter"
	"github.com/alvarocabanas/cart/internal/io/rest"
	"github.com/alvarocabanas/cart/internal/metrics"
	"github.com/alvarocabanas/cart/internal/storage"
	"github.com/google/wire"
	"go.opencensus.io/stats/view"
	"go.opencensus.io/trace"
	"net/http"
)

// Injectors from wire.go:

func InitializeServer(ctx context.Context, cfg Config) (*http.Server, error) {
	address := getServerAddress(cfg)
	inMemoryCartRepository := storage.NewInMemoryCartRepository()
	inMemoryItemRepository := storage.NewInMemoryItemRepository()
	cartCreator := creator.NewCartCreator(inMemoryCartRepository, inMemoryItemRepository)
	cartGetter := getter.NewCartGetter(inMemoryCartRepository)
	openCensusRecorder, err := metrics.NewOpenCensusRecorder()
	if err != nil {
		return nil, err
	}
	cartHandler := rest.NewCartHandler(cartCreator, cartGetter, openCensusRecorder)
	metricsHandler, err := initMetricsExporter(cfg)
	if err != nil {
		return nil, err
	}
	server := rest.NewServer(address, cartHandler, metricsHandler)
	return server, nil
}

// wire.go:

const serviceName = "cart"

const jaegerTracingUrl = "http://jaeger:14268/api/traces"

// In future iterations the config will come from Environment variables
type Config struct {
	ServerPort string `mapstructure:"server_port"`
}

var appSet = wire.NewSet(getter.NewCartGetter, creator.NewCartCreator)

var storageSet = wire.NewSet(storage.NewInMemoryCartRepository, storage.NewInMemoryItemRepository)

var handlerSet = wire.NewSet(rest.NewCartHandler)

func getServerAddress(cfg Config) rest.Address {
	return rest.Address(cfg.ServerPort)
}

func initMetricsExporter(cfg Config) (rest.MetricsHandler, error) {
	exporter, err := prometheus.NewExporter(prometheus.Options{})
	if err != nil {
		return nil, err
	}
	view.RegisterExporter(exporter)

	return exporter, nil
}

func InitTraceExporter() error {
	exporter, err := jaeger.NewExporter(jaeger.Options{
		CollectorEndpoint: jaegerTracingUrl,
		Process: jaeger.Process{
			ServiceName: serviceName,
		},
	})
	if err != nil {
		return err
	}
	defer exporter.Flush()
	trace.RegisterExporter(exporter)
	trace.ApplyConfig(trace.Config{DefaultSampler: trace.AlwaysSample()})
	return nil
}
